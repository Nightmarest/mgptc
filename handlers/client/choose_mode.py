from aiogram.types import (Message, CallbackQuery)
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hide_link

from utils.func import get_text, stable_formatted
from database.models.stable import Stable
from database.models.clients import Clients
from keyboards.client_kb import kb


async def panel_mode(message: Message, user: Clients):
    if user.model == "stable":
        await message.answer(
            text=get_text('text.generate_mj'),
            reply_markup=kb.panel_mode()
        )

    elif user.model == "chatgpt":
        await message.answer(
            text=get_text('text.generate_gpt'),
            reply_markup=kb.panel_mode()
        )

    elif user.model == "pikalabs":
        await message.answer(
            text=get_text('text.generate_zeroscope'),
            reply_markup=kb.panel_mode()
        )

    elif user.model == "deepai":
        await message.answer(
            text="<b>–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: üë®‚Äçüé® DeepAi</b>",
            reply_markup=kb.panel_mode()
        )
    elif user.model == "dalle":
        await message.answer(
            text="<b>–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: üë®‚Äçüé® DALL-E</b>",
            reply_markup=kb.panel_mode()

        )



async def choose_mode(call: CallbackQuery, state: FSMContext, user: Clients):
    if call.data == 'change_mode':
        await call.message.edit_text(
            text=get_text('text.change_mode_sms'),
            reply_markup= kb.change_mode()
        )

    elif call.data == 'chatgpt_mode':
        user.model = "chatgpt"
        await state.update_data(
            dialog_list=[{"role": "system", "content": ""}]
        )
        await call.message.edit_text(
            text=get_text('text.switch_to_chatgpt')
        )

    elif call.data == 'stable_mode':
        user.model = "stable"
        await call.message.edit_text(
            text=get_text('text.switch_to_midjourney'),
            reply_markup=kb.switch_to_stable()
        )

    elif call.data == 'pikalabs_mode':
        user.model = "pikalabs"
        await call.message.edit_text(
            text=get_text('text.switch_to_pikalabs')
        )

    elif call.data == 'deepai_mode':
        user.model = "deepai"
        await call.message.edit_text(
            text=get_text('text.switch_to_deepai')
        )
    elif call.data == 'dalle_mode':
        user.model = "dalle"
        await call.message.edit_text(
            text=get_text('text.switch_to_dalle')
        )




async def manage_stable_menu(call: CallbackQuery, stable: Stable):
    await call.answer()
    TEXT = "<b>üèôÔ∏è –§–æ—Ä–º–∞—Ç:</b> <code>{}</code>\nüß¢ <b>–°—Ç–∏–ª—å:</b> <code>{}</code>\n<b>üñ±Ô∏è –ú–æ–¥–µ–ª—å:</b> <code>{}</code>".format(
            stable_formatted(stable.ratio),
            stable_formatted(stable.style),
            stable_formatted(stable.model)
    )

    if call.data == "manage_stable_menu_new":
        await call.message.answer(
            text=TEXT,
            reply_markup=kb.manage_stable(stable.ratio)
        )
    else:
        await call.message.edit_text(
            text=TEXT,
            reply_markup=kb.manage_stable(stable.ratio)
        )


async def manage_stable_ratio(call: CallbackQuery, stable: Stable):
    call_text = ""
    if call.data != "manage_stable_ratio":
        call_ratio = call.data.split("_")[2]
        stable.ratio = call_ratio

    if stable.ratio == "1024:1024":
        call_text = '''<a href="https://telegra.ph/file/0706eb11e9cde08ac3b22.jpg">‚Å†</a><b>–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>'''

    elif stable.ratio == "512:768":
        call_text = '''<a href="https://telegra.ph/file/b5523204b71b2ba648c45.jpg">‚Å†</a><b>–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>'''

    elif stable.ratio == "768:512":
        call_text = '''<a href="https://telegra.ph/file/c436a96a1ab74192b4280.jpg">‚Å†</a><b>–®–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç</b>'''

    await call.message.edit_text(
        text=call_text,
        reply_markup=kb.manage_ratio(stable.ratio)
    )


async def manage_stable_style(call: CallbackQuery, stable: Stable):
    call_text = ""

    if call.data != "manage_stable_style":
        call_style = call.data.split("_")[2]
        stable.style = call_style

    if stable.style == "midjourney":
        call_text = '''<a href="https://telegra.ph/file/8167c1d041e2188445427.png">‚Å†</a><b>–°—Ç–∏–ª—å Midjourney –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–ø–ª–æ—Ç—ã –∏ –¥–µ–ª–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏–º –Ω–∞ –∫–∞—Ä—Ç–∏–Ω—É.</b>'''
    elif stable.style == "default":
        call_text = '''<a href="https://telegra.ph/file/4c8f99299558de0a1a617.png">‚Å†</a>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Å—Ç–∏–ª—è, —É –≤–∞—Å –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏–π!üïä'''

    await call.message.edit_text(
        text=call_text,
        reply_markup=kb.manage_style(stable.style)
    )


async def manage_stable_model(call: CallbackQuery, stable: Stable):
    call_text = ""

    if call.data != "manage_stable_model":
        stable_model = call.data.split("_")[2]
        stable.model = stable_model

    text_list = [
        (
            f'''{hide_link("https://image.civitai.com/xG1nkqKTMzGDvpLrqFT7WA/c63c2f98-4d4a-43e8-82c4-f7a577a8db72/width=1152/00000-1447182128.jpeg")}<b>–° –ø–æ–º–æ—â—å—é Juggernaut XL –≤—ã –º–æ–∂–µ—Ç–µ –±–µ–∑ –æ—Å–æ–±—ã—Ö —É—Å–∏–ª–∏–π —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã—Ö –∏ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ª–æ–∫–∞—Ü–∏–∏.

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤ —Ü–µ–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å, –ø—Ä–∏–º–µ–Ω—è—è —Å—Ç–∏–ª—å Midjourney.</b>''',
            "juggernaut-xl-v7"
        ),
        (
            f'''{hide_link("https://image.civitai.com/xG1nkqKTMzGDvpLrqFT7WA/68df5736-dd1f-4df4-8e7d-5fbd7adf8730/width=720/0.jpeg")}<b>–≠—Ç–∞ –º–æ–¥–µ–ª—å –æ—Ç–ª–∏—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º–∞.</b>''',
            "albedobase-xl"
        ),
        (
            f'''{hide_link("https://image.stablediffusionapi.com/?quality=45&Image=https://pub-3626123a908346a7a8be8d9295f44e26.r2.dev/generations/18141439221696749891.png")}<b>–≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–∞–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º –∏ –¥–∞–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Å–µ, —á—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç –≤–∞—à–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ.</b>''',
            "yamermix-v8-vae"
        ),
        (
            f'''{hide_link("https://pub-3626123a908346a7a8be8d9295f44e26.r2.dev/generations/18350195621701335828.png")}<b>–ù–æ–≤–∞—è Colossus Project XL –¥–∞—ë—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∫–æ—Ä–æ—Ç–∫–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∞–º. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å –ª—ë–≥–∫–æ—Å—Ç—å—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–µ–¥–µ–≤—Ä—ã.</b>''',
            "colossus-project-xl-sfwns"
        )
    ]

    for text in text_list:
        if stable.model == text[1]:
            call_text = text[0]

    await call.message.edit_text(
        text=call_text,
        reply_markup=kb.manage_model(stable.model)
    )
