# AIOGRAM 3

import datetime
import sys, os


from aiogram.types import Message, FSInputFile, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InputMediaPhoto

from config_data.create_bot import db

from handlers.admin.keyboard import kb
from handlers.admin.state import AdminState
from handlers.admin.process import func
from config_data.config import config


async def admin_menu(message: Message):
    await message.answer('üëë –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:',
                        reply_markup = kb.admin_menu())


async def admin_db(message: Message):
    try:
        finish = db.admin_request(message.text)
    except Exception as e:
        return await message.answer(str(e))
    else:
        await message.answer(f"–£—Å–ø–µ—à–Ω–æ <code>{str(finish)}</code>")


async def admin_call_handler(call: CallbackQuery, state: FSMContext):
    step = call.data.split("_")[1]

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if step == 'menu':
        await state.set_state()

        await call.message.delete()
        await call.message.answer(
            text='<b>üëë –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:</b>',
            reply_markup = kb.admin_menu()
        )


    # —Ä–∞—Å—Å—ã–ª–∫–∞
    elif step == 'mail':
        await state.set_state(AdminState.mail)
        await call.message.edit_text("<b>üì© –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>"
                                     "\n\n<i>‚ÑπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è!</i>",
                                  reply_markup=kb.go_back())


    # –û–ü
    elif step == 'sub':
        await state.set_state()
        text = func.get_op()
        await call.message.edit_text("<b>üë• –ú–µ–Ω—é –û–ü:</b>\n\n"
                                    f"{text}",
                                     reply_markup=kb.sub(),
                                     disable_web_page_preview=True)


    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif step == 'stat':
        db_info = db.admin_request(f"SELECT join_date, buyer, where_from, dead FROM clients")
        db_date = db.admin_request("SELECT join_date FROM clients")
        stats_text = func.get_stats_str(db_info)

        await call.message.delete()
        stats_msg = await call.message.answer_video(
            video="https://i.pinimg.com/originals/f0/f8/51/f0f8518804b731b18740d4f186fa42c6.gif",
            caption=stats_text,
            parse_mode="HTML",
            reply_markup= kb.go_back()
        )

        img_bytes = func.get_stats_graph(db_date)

        await stats_msg.edit_media(
            media=InputMediaPhoto(
                media=BufferedInputFile(
                    img_bytes.getvalue(),
                    filename="stats.png",
                ),
                caption=stats_msg.html_text,
                parse_mode="HTML"
            ),
            reply_markup=stats_msg.reply_markup
        )


    elif step == 'link':
        await state.set_state()
        db_ref = db.admin_request(f"SELECT id, count, token FROM ads")

        await call.message.delete()
        await call.message.answer(
            text="<b>‚õì –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é:</b>",
            reply_markup=kb.link(db_ref))


    elif step == 'bd':
        wait_message = await call.message.edit_text("<b>üìÉ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ë–î...</b>")

        try:
            with open("handlers/admin/user_ids.txt", "w") as file:
                user_id_list = db.admin_request(f"SELECT id FROM {config['BDTable']}")
                for user_id in user_id_list:
                    file.write(str(user_id[0]) + "\n")
            document = FSInputFile("handlers/admin/user_ids.txt")
            await call.message.answer_document(document= document,
                                               caption= f"<b>üìÉ –ì–æ—Ç–æ–≤–æ! –ë–î {str(datetime.date.today())}</b>\n\n"
                                                         "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - /admin")
        except Exception as e:
            await call.message.answer(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <code>{e}</code>",
                                         reply_markup=kb.go_back())



    elif step == 'dead':
        wait_message = await call.message.edit_text("<b>‚ôøÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç —É–¥–∞–ª–µ–Ω–∏–µ –º—ë—Ä—Ç–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</b>")
        count_dead = len(db.admin_request(f"SELECT * FROM {config['BDTable']} WHERE dead = 1"))

        try:
            db.admin_request(f"DELETE FROM {config['BDTable']} WHERE dead = true")
            await wait_message.delete()
            await call.message.answer(f"<b>‚ôøÔ∏è –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {count_dead} –º—ë—Ä—Ç–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ë–î!</b>",
                                         reply_markup=kb.go_back())
        except Exception as e:
            await call.message.answer(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <code>{e}</code>",
                                         reply_markup=kb.go_back())


    elif step == 'restart':
        await call.message.edit_text('<b>üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...</b>\n\n'
                                     '<i>–û–∂–∏–¥–∞–π—Ç–µ 5 —Å–µ–∫—É–Ω–¥!</i>',
                                     reply_markup=kb.go_back())
        python = sys.executable
        os.execl(python, python, *sys.argv)


    elif step == 'text':
        await call.message.edit_text(
            text="<b>‚úèÔ∏è –ü–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç</b>\n\n"
                 "<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.</i>",
            reply_markup=kb.text()
        )